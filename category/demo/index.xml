<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Demo | Academic</title>
    <link>https://alyona-v.github.io/category/demo/</link>
      <atom:link href="https://alyona-v.github.io/category/demo/index.xml" rel="self" type="application/rss+xml" />
    <description>Demo</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 27 May 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://alyona-v.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Demo</title>
      <link>https://alyona-v.github.io/category/demo/</link>
    </image>
    
    <item>
      <title>Programming languages</title>
      <link>https://alyona-v.github.io/post/langprog/</link>
      <pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate>
      <guid>https://alyona-v.github.io/post/langprog/</guid>
      <description>&lt;h2 id=&#34;topic&#34;&gt;Topic&lt;/h2&gt;
&lt;p&gt;A programming language is a formal language for writing computer programs. A programming language defines a set of lexical, syntactic and semantic rules that determine the appearance of the program and the actions that the performer (usually a computer) will perform under its control.&lt;/p&gt;
&lt;p&gt;Since the creation of the first programmable machines, mankind has come up with more than eight thousand programming languages ​​(including esoteric, visual and toy ones). Every year their number increases. Some languages ​​are used only by a small number of their own developers, others become known to millions of people. Professional programmers can be proficient in several programming languages.&lt;/p&gt;
&lt;p&gt;Programming languages ​​fall into two main categories high-level languages ​​and low-level languages:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;High-level language - A programming language whose means provide a description of the problem in a visual, easily perceived form, convenient for the programmer. It does not depend on the internal machine codes of any type of computer, so programs written in high-level languages ​​require translation into machine codes by translator or interpreter programs. High-level languages ​​include Fortran, PL / 1, BASIC, Pascal, C, Ada, etc.

Low-level language, [low-level language] - A programming language designed for a particular type of computer and reflecting its internal machine code (see also “machine language”, “machine-oriented language” and “assembler language” below).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are also the following types of programming languages:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Algorithmic language [algorithmic language] - A set of symbols, conventions and rules used to unambiguously describe algorithms and is usually part of a programming language;

Nonalgorithmic language [nonalgorithmic language] - A programming language, the texts of which do not contain instructions on the order in which operations are performed and serve only as source material for the synthesis of an algorithm for solving a problem;

formal language

A programming language built according to the rules of some logical calculus or formal grammar [formal grammar], which is a system of rules for constructing finite sign sequences in a given alphabet, the set of which forms a formal language;

See “algorithmic language”;

source language - The programming language in which the program is written, as opposed to the machine language in which programs are executed by the computer. Source languages ​​are classified into high level languages ​​and low level languages.

Machine (absolute) language, computer language [computer (machine) language] - A programming language designed to represent programs in a form that makes it possible to execute them by technical means;

Machine-dependent (machine-oriented) language, machine-dependent programming language [computer-sensitive (computer-oriented) language] - A programming language that takes into account the structure and characteristics of a computer of a certain type or a specific computer;

Machine-independent language - A programming language whose structure and means are not associated with any particular computer and allow the execution of programs compiled on it on any computer equipped with translators (see below) from this language;

Symbolic language, symbolic coding language [symbolic language] - A programming language focused on specific computers and based on encoding machine operations using a specific set of characters;

Hybrid (combined) language [hybrid language] - A programming language that also uses the means of another language;

  Graphic language [graphic language] - A language designed for writing computer graphics programs and using them.

Base language [base language] –

Machine language, common to the family of computers;

Programming language in DBMS with offline language.

Common language [common language] - Machine language common to a group of computers and external devices used by them;

Reference language [reference language] - The language that is the basis for all its specific versions, which are options for adapting the reference language to certain conditions of use and purpose;

Assembly language, assembler [assembler language] - Universal programming language, belonging to the category of low-level languages, the structure of which is determined by command formats, machine language data and computer architecture. It is used by programmers in cases where it is impossible to use a high-level language or efficient programs in machine codes are required.

Declarative (nonprocedural) language [declararative (nonprocedural) language] - A programming language that allows you to set connections and relationships between objects and quantities, but does not determine the sequence of actions (for example, Prolog languages, QBE);

Imperative (procedural) language [imperative language] -
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A programming language that allows you to explicitly (by specifying executable statements) determine actions and the order (sequence) of their execution;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Functional programming language, functional language [functional language] - A declarative programming language based on the concept of functions that define a dependency but do not determine the order of evaluation.

Specialized language [special language] - A programming language focused on solving a certain range of problems;

Page Description Language [PDL - Page Description Language] - A specialized language designed for printing devices. Provides the ability to use images in a format that is independent of the settings of the display device. The best known language of this type is PostScript.

Freestanding language [freestanding language] - A specialized high-level language, in closed DBMSs (“DBMS with a freestanding language”);

Interactive technologies design language - In DBMS - a language designed to describe the technological processes of data processing, taking into account the separation of the nature of operations by their types, as well as providing a dialogue with the system administrator;

Data Manipulation Language, YMD [DML - Data Manipulation Language] - In DBMS - a language designed to access a database and perform searches, reading and modifying its records;

List processing language [list language] - A specialized language designed to describe data processing processes represented as lists of objects;

Data description language [DDL - Data Description Language] - A language designed to describe the “conceptual schema” of a database;

Data storage description language [DSDL - Data Storage Description Language] - A language designed to describe the physical structure (schema) of a database;

Page description language [page description language] A system for encoding documents that accurately describes their appearance after preparation for printing or display. An example of such a language is PDF (Portable Document Format), developed by Adobe for storing and presenting page images.

Knowledge Representation Language [KRL - Knowledge Representation Language] - Declarative or declarative-procedural language designed to represent knowledge in computer memory (for example, Lisp and Prolog languages);

Publication language [publication language] - The language used to publish algorithms and programs;

Specification language [specification language] - Declarative language for specifying program specifications;

Problem-oriented language [problem-oriented language] - A programming language designed to solve a certain class of tasks (problems);

procedural (procedure-oriented) language [procedure-orinted language] - A problem-oriented language that facilitates the expression of a procedure as an exact algorithm;

Real-time language [real-time language] - A language used for programming tasks in which the reaction time of the computer to signals requiring immediate action is critical (for example, the Ada language);

Package control language [batch control language] - A set of commands, directives, qualifiers and rules for their use to control batch data processing;

Job control language [job-control language] - The language in which the sequence of commands that control the execution of a job is written. Unlike conventional programming languages, in which the objects of description are elements associated with the solution of a particular task, in job control languages, the objects to be converted are entire programs and output data streams processed by these programs.

Network-wide command language [CNCL - Common Network - Command language] - A standard language for interactive (interactive) data retrieval within a computer network, designed to unify the work of users with heterogeneous databases controlled by different DBMS;

System language [system language] - The language of communication between the computer operator and the computer system, which is a set of operator commands and system messages;

General purpose language, universal language [universal programming language] - A programming language focused on solving problems from almost any area and combining on a single methodological basis the most essential properties and tools of modern machine- and problem-oriented programming languages ​​(for example, assembly language, PL / 1 and etc.);

User-oriented language [user-oriented language] - A loosely formalized programming language close to natural language;

Menu language [menu language] - The language of the user&#39;s dialogue with the system, based on the use of the menu.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Week 4</title>
      <link>https://alyona-v.github.io/post/post4/</link>
      <pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate>
      <guid>https://alyona-v.github.io/post/post4/</guid>
      <description>&lt;h2 id=&#34;week-4&#34;&gt;week 4&lt;/h2&gt;
&lt;p&gt;Last week we did labs #9 and 10. In them we got acquainted with the work in the emacs text editor, and also mastered programming in the UNIX OS shell. It&amp;rsquo;s been a busy week, including learning about the basic command files. All the knowledge gained during the performance of these works was very useful this week, read more about it in the next post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Week 5</title>
      <link>https://alyona-v.github.io/post/post5/</link>
      <pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate>
      <guid>https://alyona-v.github.io/post/post5/</guid>
      <description>&lt;h2 id=&#34;week-5&#34;&gt;week 5&lt;/h2&gt;
&lt;p&gt;Last week we did labs 11 and 12. In them we got acquainted with programming in the UNIX OS shell, branches and loops. It&amp;rsquo;s been a busy week that also involved learning advanced programming. Programs written by us using bash and C. Thanks to all my readers. Have a nice week!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
