[{"authors":null,"categories":null,"content":"Воропаева Алена студентка первого курса бакалавриата факультета физики, математики и естественных наук. Я изучаю прикладную информатику.\n  Download my resumé.\n","date":1653609600,"expirydate":-62135596800,"kind":"term","lang":"ru","lastmod":1653609600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Воропаева Алена студентка первого курса бакалавриата факультета физики, математики и естественных наук. Я изучаю прикладную информатику.\n  Download my resumé.","tags":null,"title":"Воропаева Алёна Дмитриевна","type":"authors"},{"authors":null,"categories":null,"content":"На прошлой неделе я выполняла лабораторные работы по трём предметам. По Компьютерному практикуму по информационным технологиям эта была лабораторная работа посвященная ШИМ, она выполнялась с помощью Arduino. Понятие ШИМ было разобрано на примере управления яркостью светодиода с помощью двух кнопок. Лабораторная работа по технологиям программирования была посвящена понятию классов в языке С++, на операционных системах был разобран текстовый редактор emacs и программирование в командном процессоре ОС UNIX, командные файлы. Подробнее о командном процессоре:\nКомандный процессор (командная оболочка, интерпретатор команд shell) — это программа, позволяющая пользователю взаимодействовать с операционной системой компьютера.В операционных системахтипа UNIX/Linux наиболее часто используются следующие реализации командных оболочек: – оболочка Борна (Bourne shell или sh) —стандартная командная оболочка UNIX/Linux, содержащая базовый,но при этом полный набор функций;\n– С-оболочка (или csh)—надстройка на оболочкой Борна,использующая С-подобный синтаксис команд с возможностью сохранения истории выполнения команд;\n– оболочка Корна (или ksh)—напоминаетоболочку С,но операторы управления программой совместимы с операторами оболочки Борна;\n– BASH —сокращение от Bourne Again Shell (опять оболочка Борна),в основе своей совмещает свойства оболочек С и Корна (разработка компании Free Software Foundation). POSIX (Portable Operating System Interface for Computer Environments)—набор стандартов описанияинтерфейсоввзаимодействияоперационнойсистемыиприкладныхпрограмм. Стандарты POSIX разработаны комитетом IEEE (Institute of Electrical and Electronics Engineers) для обеспечения совместимости различных UNIX/Linux-подобных операционных систем и переносимости прикладных программ на уровне исходного кода. POSIX-совместимые оболочки разработаны на базе оболочки Корна.\n","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653609600,"objectID":"76d76fe0867773cd15169ab5b77b8ed3","permalink":"https://alyona-v.github.io/ru/project/indproject/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/ru/project/indproject/","section":"project","summary":"Мои проекты.","tags":["Обучение"],"title":"Индивидуальный проект","type":"project"},{"authors":["Воропаева Алёна Дмитриевна"],"categories":["Университет"],"content":"week 4 На прошлой неделе мы выполняли лпбораторные работы №9 и 10. В них мы познакомились с работой в текстовом редакторе emacs, а также освоили программирование в командном процессоре ОС UNIX. Это была насыщенная неделя, затронувшая также изучение основных комендных файлов. Все знания полученные при выполнении этих работ очень пригодились на этой неделе, подробне читайте об этом в следующем посте.\n","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653609600,"objectID":"122591be03ff19b49a97c0378f58bb18","permalink":"https://alyona-v.github.io/ru/post/post4/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/ru/post/post4/","section":"post","summary":"Немного о прошлом","tags":["Обучение"],"title":"Неделя 4","type":"post"},{"authors":["Воропаева Алёна Дмитриевна"],"categories":["Университет"],"content":"Неделя 5 На прошлой неделе мы выполняли лпбораторные работы №11 и 12. В них мы познакомились с программированием в командном процессоре ОС UNIX, ветвлениями и циклами. Это была насыщенная неделя, затронувшая также изучение расширенного програмирования. Программы написанные нами использоваои bash и С. Спасибо всем моим читатлям. Хорошей недели!\n","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653609600,"objectID":"918c2ae645793b070e27ace951359a94","permalink":"https://alyona-v.github.io/ru/post/post5/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/ru/post/post5/","section":"post","summary":"Немного о прошлом","tags":["Обучение"],"title":"Неделя 5","type":"post"},{"authors":["Воропаева Алёна Дмитриевна"],"categories":["Демо"],"content":"Topic Язы́к программи́рования — формальный язык, предназначенный для записи компьютерных программ. Язык программирования определяет набор лексических, синтаксических и семантических правил, определяющих внешний вид программы и действия, которые выполнит исполнитель (обычно — ЭВМ) под её управлением.\nСо времени создания первых программируемых машин человечество придумало более восьми тысяч языков программирования (включая эзотерические, визуальные и игрушечные). Каждый год их число увеличивается. Некоторыми языками умеет пользоваться только небольшое число их собственных разработчиков, другие становятся известны миллионам людей. Профессиональные программисты могут владеть несколькими языками программирования.\nЯзыки программирования разделяются на две основные категории языки высокого уровня и языки низкого уровня :\nЯзык высокого уровня [high-level language] - Язык программирования, средства которого обеспечивают описание задачи в наглядном, легко воспринимаемом виде, удобном для программиста. Он не зависит от внутренних машинных кодов ЭВМ любого типа, поэтому программы, написанные на языках высокого уровня, требуют перевода в машинные коды программами транслятора либо интерпретатора. К языкам высокого уровня относят Фортран , ПЛ/1 , Бейсик , Паскаль , Си , Ада и др. Язык низкого уровня , [low-level language ] - Язык программирования, предназначенный для определенного типа ЭВМ и отражающий его внутренний машинный код (см. ниже также “машинный язык “, “ машинно-ориентированный язык “ и “ язык ассемблера “).  Различают также следующие виды языков программирования:\nАлгоритмический язык [algorithmic language ] - Совокупность символов, соглашений и правил, используемых для однозначного описания алгоритмов и обычно являющаяся часть языка программирования ; Неалгоритмический язык [nonalgorithmic language] - Язык программирования, тексты которого не содержат указаний на порядок выполнения операций и служат лишь исходным материалом для синтеза алгоритма решения задачи; Формальный язык [formal language] – Язык программирования, построенный по правилам некоторого логического исчисления или формальной грамматики [formal grammar ], представляющей собой систему правил построения в заданном алфавите конечных знаковых последовательностей, множество которых образует формальный язык; См. “алгоритмический язык “; Исходный язык [source language] - Язык программирования, на котором написана программа, в отличие от машинного языка, на котором программы выполняются компьютером. Исходные языки классифицируются на языки высокого уровня и языки низкого уровня . Машинный ( абсолютный ) язык , язык ЭВМ [computer (machine) language] - Язык программирования, предназначенный для представления программ в форме, обеспечивающей возможность их выполнения техническими средствами; Машинозависимый ( машинно-ориентированный ) язык , машинозависимый язык программирования [computer-sensitive (computer-oriented) language] - Язык программирования, учитывающий структуру и характеристики ЭВМ определенного типа или конкретной ЭВМ; Машиннонезависимый язык [machine-independent language] - Язык программирования, структура и средства которого не связаны ни с какой конкретной ЭВМ и позволяют выполнять составленные на нем программы на любой ЭВМ, снабженной трансляторами (см. ниже) с этого языка; Символический язык , язык символического кодирования [symbolic language] - Язык программирования, ориентированный на конкретные ЭВМ и основанный на кодировании машинных операций при помощи определенного набора символов; Гибридный ( комбинированный ) язык [hibrid language] - Язык программирования, использующий также средства другого языка; Графический язык [graphic language ] - Язык, предназначенный для написания программ машинной графики и пользования ими. Базовый язык [base language] – Машинный язык , общий для семейства ЭВМ; Язык программирования в СУБД с автономным языком . Общий язык [common language] - Машинный язык, общий для группы ЭВМ и используемых ими внешних устройств; Эталонный язык [reference language ] - Язык, являющийся основой для всех его конкретных версий, являющихся вариантами адаптации эталонного языка к определенным условиям применения и назначения; Язык ассемблера , ассемблер [assembler language ] - Универсальный язык программирования , относящийся к категории языков низкого уровня, структура которого определяется форматами команд, данными машинного языка и архитектурой ЭВМ. Используется программистами в тех случаях, когда невозможно применение языка высокого уровня или требуются эффективные программы в машинных кодах. Декларативный ( непроцедурный ) язык [declararative (nonprocedural) language] - Язык программирования, который позволяет задавать связи и отношения между объектами и величинами, но не определяет последовательность выполнения действий (например, языки Пролог , QBE); Императивный ( процедурный ) язык [imperative language] - Язык программирования, который позволяет в явной форме (при помощи задания выполняемых операторов) определять …","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653609600,"objectID":"64f4f5798e65a9a96d52e725731c7d54","permalink":"https://alyona-v.github.io/ru/post/langprog/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/ru/post/langprog/","section":"post","summary":"В этом посте я расскажу о языках программирования, сегодня эта тема актуальна как никогда","tags":["Обучение"],"title":"Языки программирования","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne  Two  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://alyona-v.github.io/ru/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/ru/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"}]