[{"authors":null,"categories":null,"content":"Voropaeva Alyona first-year undergraduate student of the Faculty of Physics, Mathematics and Natural Sciences. I am studying Applied Informatics.\n  Download my resumé.\n","date":1653609600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1653609600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Voropaeva Alyona first-year undergraduate student of the Faculty of Physics, Mathematics and Natural Sciences. I am studying Applied Informatics.\n  Download my resumé.","tags":null,"title":"Voropaeva Alyona Dmitrievna","type":"authors"},{"authors":null,"categories":null,"content":"Last week I did lab work on three subjects. According to the Computer Workshop on Information Technology, this was a PWM lab, it was performed using an Arduino. The concept of PWM was analyzed using the example of controlling the brightness of an LED using two buttons. Laboratory work on programming technologies was devoted to the concept of classes in the C ++ language, on operating systems the emacs text editor and programming in the UNIX OS command processor, batch files were analyzed. More about the command processor:\nA command processor (command shell, shell command interpreter) is a program that allows the user to interact with the operating system. computer. In operating systems such as UNIX / Linux, the most commonly used the following shell implementations: Bourne shell (sh) is a standard UNIX/Linux command shell, containing a basic, but at the same time a complete set of functions;\n– C-shell (or csh)—a Bourne shell add-on that uses a C-like command syntax with the ability to save the history of command execution;\n– the Korn shell (or ksh)—resembles the C shell, but the program control statements are compatible with those of the Bourne shell;\n BASH - short for Bourne Again Shell (Bourne shell again), basically combines the properties of C and Korn shells (developed by the Free Software Foundation). POSIX (Portable Operating System Interface for Computer Environments)—a set of standards descriptions of interfaces for interaction between the operating system and application programs. The POSIX standards were developed by the IEEE (Institute of Electrical and Electronics Engineers) to ensure compatibility between different UNIX/Linux-like operating systems and portability of application programs at the source code level. POSIX-compliant shells are based on the Korn shell.  ","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"76d76fe0867773cd15169ab5b77b8ed3","permalink":"https://alyona-v.github.io/project/indproject/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/project/indproject/","section":"project","summary":"My labs in last week.","tags":["Academic"],"title":"Individual Project","type":"project"},{"authors":["Voropaeva Alyona Dmitrievna"],"categories":["Demo"],"content":"Topic A programming language is a formal language for writing computer programs. A programming language defines a set of lexical, syntactic and semantic rules that determine the appearance of the program and the actions that the performer (usually a computer) will perform under its control.\nSince the creation of the first programmable machines, mankind has come up with more than eight thousand programming languages ​​(including esoteric, visual and toy ones). Every year their number increases. Some languages ​​are used only by a small number of their own developers, others become known to millions of people. Professional programmers can be proficient in several programming languages.\nProgramming languages ​​fall into two main categories high-level languages ​​and low-level languages:\nHigh-level language - A programming language whose means provide a description of the problem in a visual, easily perceived form, convenient for the programmer. It does not depend on the internal machine codes of any type of computer, so programs written in high-level languages ​​require translation into machine codes by translator or interpreter programs. High-level languages ​​include Fortran, PL / 1, BASIC, Pascal, C, Ada, etc. Low-level language, [low-level language] - A programming language designed for a particular type of computer and reflecting its internal machine code (see also “machine language”, “machine-oriented language” and “assembler language” below).  There are also the following types of programming languages:\nAlgorithmic language [algorithmic language] - A set of symbols, conventions and rules used to unambiguously describe algorithms and is usually part of a programming language; Nonalgorithmic language [nonalgorithmic language] - A programming language, the texts of which do not contain instructions on the order in which operations are performed and serve only as source material for the synthesis of an algorithm for solving a problem; formal language A programming language built according to the rules of some logical calculus or formal grammar [formal grammar], which is a system of rules for constructing finite sign sequences in a given alphabet, the set of which forms a formal language; See “algorithmic language”; source language - The programming language in which the program is written, as opposed to the machine language in which programs are executed by the computer. Source languages ​​are classified into high level languages ​​and low level languages. Machine (absolute) language, computer language [computer (machine) language] - A programming language designed to represent programs in a form that makes it possible to execute them by technical means; Machine-dependent (machine-oriented) language, machine-dependent programming language [computer-sensitive (computer-oriented) language] - A programming language that takes into account the structure and characteristics of a computer of a certain type or a specific computer; Machine-independent language - A programming language whose structure and means are not associated with any particular computer and allow the execution of programs compiled on it on any computer equipped with translators (see below) from this language; Symbolic language, symbolic coding language [symbolic language] - A programming language focused on specific computers and based on encoding machine operations using a specific set of characters; Hybrid (combined) language [hybrid language] - A programming language that also uses the means of another language; Graphic language [graphic language] - A language designed for writing computer graphics programs and using them. Base language [base language] – Machine language, common to the family of computers; Programming language in DBMS with offline language. Common language [common language] - Machine language common to a group of computers and external devices used by them; Reference language [reference language] - The language that is the basis for all its specific versions, which are options for adapting the reference language to certain conditions of use and purpose; Assembly language, assembler [assembler language] - Universal programming language, belonging to the category of low-level languages, the structure of which is determined by command formats, machine language data and computer architecture. It is used by programmers in cases where it is impossible to use a high-level language or efficient programs in machine codes are required. Declarative (nonprocedural) language [declararative (nonprocedural) language] - A programming language that allows you to set connections and relationships between objects and quantities, but does not determine the sequence of actions (for example, Prolog languages, QBE); Imperative (procedural) language [imperative language] -  A programming language that allows you to explicitly (by specifying executable statements) determine actions and the order (sequence) of their execution;\nFunctional programming …","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"64f4f5798e65a9a96d52e725731c7d54","permalink":"https://alyona-v.github.io/post/langprog/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/post/langprog/","section":"post","summary":"In this post I will talk about programming languages, today this topic is more relevant than ever","tags":["Academic"],"title":"Programming languages","type":"post"},{"authors":["Voropaeva Alyona Dmitrievna"],"categories":["Demo"],"content":"week 4 Last week we did labs #9 and 10. In them we got acquainted with the work in the emacs text editor, and also mastered programming in the UNIX OS shell. It’s been a busy week, including learning about the basic command files. All the knowledge gained during the performance of these works was very useful this week, read more about it in the next post.\n","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"122591be03ff19b49a97c0378f58bb18","permalink":"https://alyona-v.github.io/post/post4/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/post/post4/","section":"post","summary":"Here i told about my last week","tags":["Academic"],"title":"Week 4","type":"post"},{"authors":["Voropaeva Alyona Dmitrievna"],"categories":["Demo"],"content":"week 5 Last week we did labs 11 and 12. In them we got acquainted with programming in the UNIX OS shell, branches and loops. It’s been a busy week that also involved learning advanced programming. Programs written by us using bash and C. Thanks to all my readers. Have a nice week!\n","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"918c2ae645793b070e27ace951359a94","permalink":"https://alyona-v.github.io/post/post5/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/post/post5/","section":"post","summary":"Here i told about my last week","tags":["Academic"],"title":"Week 5","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne  Two  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://alyona-v.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Voropaeva Alyona Dmitrievna","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://alyona-v.github.io/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]